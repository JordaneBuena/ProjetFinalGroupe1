{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Validators } from \"@angular/forms\";\nlet KlassAddComponent = class KlassAddComponent {\n  constructor(fb, klassServ, teacherServ, activatedRoute, router) {\n    this.fb = fb;\n    this.klassServ = klassServ;\n    this.teacherServ = teacherServ;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.formSubmitted = false;\n    this.teachers = [];\n  }\n  submitForm() {\n    this.formSubmitted = true;\n    if (this.myForm.valid) {\n      this.klassServ.add(this.myForm.value).subscribe(s => this.router.navigate(['../'], {\n        relativeTo: this.activatedRoute\n      }));\n    }\n  }\n  ngOnInit() {\n    this.schoolId = this.activatedRoute.snapshot.paramMap.get(\"sId\") || \"\";\n    const id = this.activatedRoute.snapshot.paramMap.get(\"tId\") || \"\";\n    // if (id != '') {\n    //   this.teacherServ.findOne(+id).subscribe(v => {\n    //     this.teacher = v\n    //     this.myForm.get('id')?.setValue(this.teacher.id)\n    //   })}\n    this.myForm = this.fb.group({\n      name: ['', Validators.required],\n      principalTeacher: this.myForm2 = this.fb.group({\n        id: ['']\n      }),\n      school: {\n        id: this.schoolId\n      }\n    });\n    // this.myFormt = this.fb.group({\n    //   //name: ['', Validators.required]\n    //   principalTeacher: this.fb.group({\n    //     id: [''],\n    //     principaleKlass:{\n    //      id: [''],\n    //     }\n    //   })\n    // school: {id: this.schoolId}\n    //})\n    this.schoolId = this.activatedRoute.snapshot.paramMap.get(\"sId\") || \"\";\n    this.teacherServ.findAll().subscribe(v => this.teachers = v.filter(teacher => teacher.school.id === +this.schoolId));\n  }\n};\nKlassAddComponent = __decorate([Component({\n  selector: 'app-klass-add',\n  templateUrl: './klass-add.component.html',\n  styleUrls: ['./klass-add.component.css']\n})], KlassAddComponent);\nexport { KlassAddComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AACzC,SAAgCC,UAAU,QAAO,gBAAgB;AAY1D,IAAMC,iBAAiB,GAAvB,MAAMA,iBAAiB;EAiB5BC,YAAoBC,EAAe,EACfC,SAAuB,EACvBC,WAA2B,EAC3BC,cAA8B,EAC9BC,MAAc;IAJd,OAAE,GAAFJ,EAAE;IACF,cAAS,GAATC,SAAS;IACT,gBAAW,GAAXC,WAAW;IACX,mBAAc,GAAdC,cAAc;IACd,WAAM,GAANC,MAAM;IAd1B,kBAAa,GAAY,KAAK;IAI9B,aAAQ,GAAc,EAAE;EAWxB;EAEAC,UAAU;IACR,IAAI,CAACC,aAAa,GAAG,IAAI;IACzB,IAAI,IAAI,CAACC,MAAM,CAACC,KAAK,EAAE;MACrB,IAAI,CAACP,SAAS,CAACQ,GAAG,CAAC,IAAI,CAACF,MAAM,CAACG,KAAK,CAAC,CAClCC,SAAS,CAACC,CAAC,IACV,IAAI,CAACR,MAAM,CAACS,QAAQ,CAAC,CAAC,KAAK,CAAC,EAAE;QAACC,UAAU,EAAE,IAAI,CAACX;MAAc,CAAC,CAAC,CAAC;;EAGzE;EAEAY,QAAQ;IACN,IAAI,CAACC,QAAQ,GAAG,IAAI,CAACb,cAAc,CAACc,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;IACtE,MAAMC,EAAE,GAAG,IAAI,CAACjB,cAAc,CAACc,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;IAEjE;IACA;IACA;IACA;IACA;IAEA,IAAI,CAACZ,MAAM,GAAG,IAAI,CAACP,EAAE,CAACqB,KAAK,CAAC;MAC1BC,IAAI,EAAE,CAAC,EAAE,EAAEzB,UAAU,CAAC0B,QAAQ,CAAC;MAC/BC,gBAAgB,EAAE,IAAI,CAACC,OAAO,GAAG,IAAI,CAACzB,EAAE,CAACqB,KAAK,CAAC;QAC5CD,EAAE,EAAE,CAAC,EAAE;OACR,CAAC;MACHM,MAAM,EAAE;QAACN,EAAE,EAAE,IAAI,CAACJ;MAAQ;KAC1B,CAAC;IACH;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACE;IACF;IAEA,IAAI,CAACA,QAAQ,GAAG,IAAI,CAACb,cAAc,CAACc,QAAQ,CAACC,QAAQ,CAACC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE;IACtE,IAAI,CAACjB,WAAW,CAACyB,OAAO,EAAE,CAAChB,SAAS,CAACiB,CAAC,IAAI,IAAI,CAACC,QAAQ,GAAGD,CAAC,CAACE,MAAM,CAACC,OAAO,IAAIA,OAAO,CAACL,MAAM,CAACN,EAAE,KAAK,CAAC,IAAI,CAACJ,QAAQ,CAAC,CAAC;EAEpH;CAMH;AAvEYlB,iBAAiB,eAL7BF,SAAS,CAAC;EACToC,QAAQ,EAAE,eAAe;EACzBC,WAAW,EAAE,4BAA4B;EACzCC,SAAS,EAAE,CAAC,2BAA2B;CACxC,CAAC,GACWpC,iBAAiB,CAuE7B;SAvEYA,iBAAiB","names":["Component","Validators","KlassAddComponent","constructor","fb","klassServ","teacherServ","activatedRoute","router","submitForm","formSubmitted","myForm","valid","add","value","subscribe","s","navigate","relativeTo","ngOnInit","schoolId","snapshot","paramMap","get","id","group","name","required","principalTeacher","myForm2","school","findAll","v","teachers","filter","teacher","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/jord/Desktop/ProjetFinal/ProjetFinalGroupe1/schoolFront/src/app/klass-add/klass-add.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from \"@angular/forms\";\nimport {Teacher} from \"../../model/teacher.model\";\nimport {TeacherService} from \"../teacher.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {Klass} from \"../../model/klass.model\";\nimport {KlassService} from \"../klass.service\";\n\n@Component({\n  selector: 'app-klass-add',\n  templateUrl: './klass-add.component.html',\n  styleUrls: ['./klass-add.component.css']\n})\nexport class KlassAddComponent {\n\n  myForm!: FormGroup;\n  myForm2!: FormGroup;\n\n  klass: Klass | undefined\n  teacher: Teacher | undefined\n  formSubmitted: boolean = false\n\n  schoolId!: string\n\n  teachers: Teacher[] = []\n\n  klass1!: Klass\n\n\n\n  constructor(private fb: FormBuilder,\n              private klassServ: KlassService,\n              private teacherServ: TeacherService,\n              private activatedRoute: ActivatedRoute,\n              private router: Router) {\n  };\n\n  submitForm() {\n    this.formSubmitted = true\n    if (this.myForm.valid) {\n      this.klassServ.add(this.myForm.value)\n        .subscribe(s =>\n          this.router.navigate(['../'], {relativeTo: this.activatedRoute}))\n    }\n\n  };\n\n  ngOnInit(): void {\n    this.schoolId = this.activatedRoute.snapshot.paramMap.get(\"sId\") || \"\";\n    const id = this.activatedRoute.snapshot.paramMap.get(\"tId\") || \"\";\n\n    // if (id != '') {\n    //   this.teacherServ.findOne(+id).subscribe(v => {\n    //     this.teacher = v\n    //     this.myForm.get('id')?.setValue(this.teacher.id)\n    //   })}\n\n    this.myForm = this.fb.group({\n      name: ['', Validators.required],\n      principalTeacher: this.myForm2 = this.fb.group({\n         id: ['']\n       }),\n      school: {id: this.schoolId}\n     })\n    // this.myFormt = this.fb.group({\n    //   //name: ['', Validators.required]\n    //   principalTeacher: this.fb.group({\n    //     id: [''],\n    //     principaleKlass:{\n    //      id: [''],\n    //     }\n    //   })\n      // school: {id: this.schoolId}\n    //})\n\n    this.schoolId = this.activatedRoute.snapshot.paramMap.get(\"sId\") || \"\";\n    this.teacherServ.findAll().subscribe(v => this.teachers = v.filter(teacher => teacher.school.id === +this.schoolId))\n\n    }\n\n\n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}