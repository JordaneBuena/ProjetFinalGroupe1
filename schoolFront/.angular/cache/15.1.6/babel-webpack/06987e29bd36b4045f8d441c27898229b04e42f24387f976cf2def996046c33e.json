{"ast":null,"code":"import { FormArray, FormControl, Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../class-room.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"../subject.service\";\nimport * as i5 from \"@angular/common\";\nfunction ClassRoomAddComponent_ul_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"ul\");\n    i0.ɵɵelement(1, \"li\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ClassRoomAddComponent_ng_container_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0, 15);\n    i0.ɵɵelement(1, \"input\", 16);\n    i0.ɵɵtext(2);\n    i0.ɵɵelement(3, \"br\");\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const s_r2 = ctx.$implicit;\n    const i_r3 = ctx.index;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"formControlName\", i_r3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"\", s_r2.name, \" \");\n  }\n}\nexport class ClassRoomAddComponent {\n  constructor(fb, roomServ, activatedRoute, router, subjectServ) {\n    this.fb = fb;\n    this.roomServ = roomServ;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.subjectServ = subjectServ;\n    this.formSubmitted = false;\n  }\n  getordersFormArray() {\n    return this.myForm.controls['subjectsExcluded'];\n  }\n  ngOnInit() {\n    this.schoolId = this.activatedRoute.snapshot.paramMap.get(\"sId\") || \"\";\n    this.subjectServ.getAll().subscribe(v => {\n      this.subjects = v.filter(subject => subject.school.id === +this.schoolId);\n      this.addCheckboxes();\n    });\n    this.myForm = this.fb.group({\n      name: ['', Validators.required],\n      subjectsExcluded: new FormArray([]),\n      capacite: [0, Validators.required],\n      school: {\n        id: this.schoolId\n      }\n    });\n  }\n  addCheckboxes() {\n    this.subjects.forEach(() => this.getordersFormArray().push(new FormControl(false)));\n  }\n  submitForm() {\n    const selectedOrderIds = this.getordersFormArray().value.map((checked, i) => checked ? this.subjects[i].id : null).filter(v => v !== null);\n    let myClassroom = this.myForm.value;\n    myClassroom.subjectsExcluded = [];\n    selectedOrderIds.forEach(id => {\n      let s = {\n        id: id\n      };\n      myClassroom.subjectsExcluded.push(s);\n    });\n    this.formSubmitted = true;\n    console.log(this.myForm);\n    if (this.myForm.valid) {\n      this.roomServ.add(this.myForm.value).subscribe(s => this.router.navigate(['../'], {\n        relativeTo: this.activatedRoute\n      }));\n    }\n  }\n}\nClassRoomAddComponent.ɵfac = function ClassRoomAddComponent_Factory(t) {\n  return new (t || ClassRoomAddComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ClassRoomService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.SubjectService));\n};\nClassRoomAddComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ClassRoomAddComponent,\n  selectors: [[\"app-class-room-add\"]],\n  decls: 24,\n  vars: 6,\n  consts: [[1, \"card\", \"w-50\"], [1, \"card-header\"], [1, \"text-danger\"], [4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\"], [1, \"card-body\"], [1, \"form-text\"], [\"for\", \"name\"], [\"type\", \"text\", \"id\", \"name\", \"formControlName\", \"name\"], [\"for\", \"subjectsExcluded\"], [\"formArrayName\", \"subjectsExcluded\", 4, \"ngFor\", \"ngForOf\"], [\"for\", \"capacite\"], [\"type\", \"number\", \"id\", \"capacite\", \"formControlName\", \"capacite\"], [1, \"card-footer\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-info\"], [\"formArrayName\", \"subjectsExcluded\"], [\"type\", \"checkbox\", \"id\", \"subjectsExcluded\", 3, \"formControlName\"]],\n  template: function ClassRoomAddComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"h1\", 1);\n      i0.ɵɵtext(2, \"Ajout de salles\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"div\", 2);\n      i0.ɵɵtemplate(4, ClassRoomAddComponent_ul_4_Template, 2, 0, \"ul\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"form\", 4);\n      i0.ɵɵlistener(\"ngSubmit\", function ClassRoomAddComponent_Template_form_ngSubmit_5_listener() {\n        return ctx.submitForm();\n      });\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"div\", 6)(8, \"label\", 7);\n      i0.ɵɵtext(9, \"Nom de la salle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 8);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"label\", 9);\n      i0.ɵɵtext(12, \"Sujet exclus:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"br\");\n      i0.ɵɵtemplate(14, ClassRoomAddComponent_ng_container_14_Template, 4, 2, \"ng-container\", 10);\n      i0.ɵɵelementStart(15, \"div\", 6)(16, \"label\", 11);\n      i0.ɵɵtext(17, \"Capacit\\u00E9 de la salle\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(18, \"input\", 12);\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(19, \"div\", 13)(20, \"button\", 14);\n      i0.ɵɵtext(21, \"Ajouter\");\n      i0.ɵɵelementEnd()()()();\n      i0.ɵɵtext(22);\n      i0.ɵɵpipe(23, \"json\");\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", !ctx.formSubmitted);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"formGroup\", ctx.myForm);\n      i0.ɵɵadvance(9);\n      i0.ɵɵproperty(\"ngForOf\", ctx.subjects);\n      i0.ɵɵadvance(8);\n      i0.ɵɵtextInterpolate1(\"\\nCheckbox values: \", i0.ɵɵpipeBind1(23, 4, ctx.myForm.value), \"\\n\");\n    }\n  },\n  dependencies: [i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NumberValueAccessor, i1.CheckboxControlValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.FormGroupDirective, i1.FormControlName, i1.FormArrayName, i5.JsonPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormArray","FormControl","Validators","i0","ClassRoomAddComponent","constructor","fb","roomServ","activatedRoute","router","subjectServ","getordersFormArray","myForm","controls","ngOnInit","schoolId","snapshot","paramMap","get","getAll","subscribe","v","subjects","filter","subject","school","id","addCheckboxes","group","name","required","subjectsExcluded","capacite","forEach","push","submitForm","selectedOrderIds","value","map","checked","i","myClassroom","s","formSubmitted","console","log","valid","add","navigate","relativeTo","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["/Users/jord/Desktop/ProjetFinal/ProjetFinalGroupe1/schoolFront/src/app/class-room-add/class-room-add.component.ts","/Users/jord/Desktop/ProjetFinal/ProjetFinalGroupe1/schoolFront/src/app/class-room-add/class-room-add.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport {FormArray, FormBuilder, FormControl, FormGroup, Validators} from \"@angular/forms\";\nimport {Klass} from \"../../model/klass.model\";\nimport {KlassService} from \"../klass.service\";\nimport {ActivatedRoute, Router} from \"@angular/router\";\nimport {ClassRoom} from \"../../model/classRoom.model\";\nimport {ClassRoomService} from \"../class-room.service\";\nimport {Subject} from \"../../model/subject.model\";\nimport {SubjectService} from \"../subject.service\";\n\n@Component({\n  selector: 'app-class-room-add',\n  templateUrl: './class-room-add.component.html',\n  styleUrls: ['./class-room-add.component.css']\n})\nexport class ClassRoomAddComponent {\n\n  myForm!: FormGroup;\n  room: ClassRoom | undefined\n  formSubmitted: boolean = false\n\n  subjects!: Subject[]\n\n  schoolId!: string\n\n  constructor(private fb: FormBuilder,\n              private roomServ: ClassRoomService,\n              private activatedRoute: ActivatedRoute,\n              private router: Router,\n              private subjectServ: SubjectService) {\n  };\n\n\n\n  getordersFormArray(): FormArray {\n    return this.myForm.controls['subjectsExcluded'] as FormArray;\n  }\n\n  ngOnInit(): void {\n    this.schoolId = this.activatedRoute.snapshot.paramMap.get(\"sId\") || \"\";\n    this.subjectServ.getAll().subscribe(\n      v => {\n        this.subjects = v.filter(subject => subject.school.id === +this.schoolId)\n        this.addCheckboxes()})\n\n    this.myForm = this.fb.group({\n      name: ['', Validators.required],\n      subjectsExcluded: new FormArray([]),\n      capacite: [0, Validators.required],\n      school: {id: this.schoolId}\n    })\n\n\n  }\n\n  private addCheckboxes() {\n    this.subjects.forEach(() => this.getordersFormArray().push(new FormControl(false)));\n  }\n\n  submitForm() {\n    const selectedOrderIds = (this.getordersFormArray().value as boolean[])\n      .map((checked, i) => checked ? this.subjects[i].id : null)\n      .filter(v => v !== null);\n    let myClassroom = this.myForm.value\n    myClassroom.subjectsExcluded = []\n    selectedOrderIds.forEach(id => {\n      let s = {id: id}\n      myClassroom.subjectsExcluded.push(s)\n    })\n    this.formSubmitted = true\n\n    console.log(this.myForm)\n    if (this.myForm.valid) {\n      this.roomServ.add(this.myForm.value)\n        .subscribe(s =>\n          this.router.navigate(['../'], {relativeTo: this.activatedRoute}))\n    }\n  };\n\n}\n","<div class=\"card w-50\">\n\n  <h1 class=\"card-header\">Ajout de salles</h1>\n  <div class=\"text-danger\">\n    <ul *ngIf=\"!formSubmitted\">\n      <li></li>\n    </ul>\n  </div>\n  <form [formGroup]=\"myForm\" (ngSubmit)=\"submitForm()\">\n    <div class=\"card-body\">\n      <div class=\"form-text\">\n        <label for=\"name\">Nom de la salle</label>\n        <input type=\"text\" id=\"name\" formControlName=\"name\">\n      </div>\n      <label for=\"subjectsExcluded\">Sujet exclus:</label>\n      <br>\n      <ng-container *ngFor=\"let s of subjects; let i = index\" formArrayName=\"subjectsExcluded\">\n        <input type=\"checkbox\" id=\"subjectsExcluded\" [formControlName]=\"i\" />{{s.name}}\n        <br />\n      </ng-container>\n      <div class=\"form-text\">\n        <label for=\"capacite\">Capacité de la salle</label>\n        <input type=\"number\" id=\"capacite\" formControlName=\"capacite\">\n      </div>\n\n    </div>\n    <div class=\"card-footer\">\n      <button class=\"btn btn-outline-info\" type=\"submit\">Ajouter</button>\n    </div>\n  </form>\n</div>\nCheckbox values: {{ myForm.value | json}}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}