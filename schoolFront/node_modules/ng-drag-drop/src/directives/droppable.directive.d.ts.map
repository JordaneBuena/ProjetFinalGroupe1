{"version":3,"file":"droppable.directive.d.ts","sources":["droppable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { Subscription, Observable } from 'rxjs';\r\nimport { ElementRef, EventEmitter, OnInit, OnDestroy, Renderer2, NgZone } from '@angular/core';\r\nimport { DropEvent } from '../shared/drop-event.model';\r\nimport { NgDragDropService } from '../services/ng-drag-drop.service';\r\nexport declare class Droppable implements OnInit, OnDestroy {\r\n    protected el: ElementRef;\r\n    private renderer;\r\n    private ng2DragDropService;\r\n    private zone;\r\n    /**\r\n     *  Event fired when Drag dragged element enters a valid drop target.\r\n     */\r\n    onDragEnter: EventEmitter<any>;\r\n    /**\r\n     * Event fired when an element is being dragged over a valid drop target\r\n     */\r\n    onDragOver: EventEmitter<any>;\r\n    /**\r\n     * Event fired when a dragged element leaves a valid drop target.\r\n     */\r\n    onDragLeave: EventEmitter<any>;\r\n    /**\r\n     * Event fired when an element is dropped on a valid drop target.\r\n     */\r\n    onDrop: EventEmitter<DropEvent>;\r\n    /**\r\n     * CSS class that is applied when a compatible draggable is being dragged over this droppable.\r\n     */\r\n    dragOverClass: string;\r\n    /**\r\n     * CSS class applied on this droppable when a compatible draggable item is being dragged.\r\n     * This can be used to visually show allowed drop zones.\r\n     */\r\n    dragHintClass: string;\r\n    /**\r\n     * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.\r\n     */\r\n    dropScope: string | Array<string> | Function;\r\n    /**\r\n     * Defines if drop is enabled. `true` by default.\r\n     */\r\n    dropEnabled: boolean;\r\n    /**\r\n     * @private\r\n     */\r\n    dragStartSubscription: Subscription;\r\n    /**\r\n     * @private\r\n     */\r\n    dragEndSubscription: Subscription;\r\n    /**\r\n     * @private\r\n     * Backing field for the dropEnabled property\r\n     */\r\n    _dropEnabled: boolean;\r\n    /**\r\n     * @private\r\n     * Field for tracking drag state. Helps when\r\n     * drag stop event occurs before the allowDrop()\r\n     * can be calculated (async).\r\n     */\r\n    _isDragActive: boolean;\r\n    /**\r\n     * @private\r\n     * Field for tracking if service is subscribed.\r\n     * Avoids creating multiple subscriptions of service.\r\n     */\r\n    _isServiceActive: boolean;\r\n    /**\r\n     * @private\r\n     * Function for unbinding the drag enter listener\r\n     */\r\n    unbindDragEnterListener: Function;\r\n    /**\r\n     * @private\r\n     * Function for unbinding the drag over listener\r\n     */\r\n    unbindDragOverListener: Function;\r\n    /**\r\n     * @private\r\n     * Function for unbinding the drag leave listener\r\n     */\r\n    unbindDragLeaveListener: Function;\r\n    constructor(el: ElementRef, renderer: Renderer2, ng2DragDropService: NgDragDropService, zone: NgZone);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    dragEnter(e: any): void;\r\n    dragOver(e: any, result: any): void;\r\n    dragLeave(e: any): void;\r\n    drop(e: any): void;\r\n    allowDrop(): Observable<boolean>;\r\n    subscribeService(): void;\r\n    unsubscribeService(): void;\r\n    unbindDragListeners(): void;\r\n}\r\n"]}