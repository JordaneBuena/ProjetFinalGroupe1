{"version":3,"file":"draggable.directive.d.ts","sources":["draggable.directive.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { ElementRef, EventEmitter, OnInit, Renderer2, NgZone, OnDestroy } from '@angular/core';\r\nimport { NgDragDropService } from '../services/ng-drag-drop.service';\r\nexport declare class Draggable implements OnInit, OnDestroy {\r\n    protected el: ElementRef;\r\n    private renderer;\r\n    private ng2DragDropService;\r\n    private zone;\r\n    /**\r\n     * The data that will be avaliable to the droppable directive on its `onDrop()` event.\r\n     */\r\n    dragData: any;\r\n    /**\r\n     * The selector that defines the drag Handle.\r\n     * If defined drag will only be allowed if dragged from the selector element.\r\n     */\r\n    dragHandle: string;\r\n    /**\r\n     * Currently not used\r\n     */\r\n    dragEffect: string;\r\n    /**\r\n     * Defines compatible drag drop pairs. Values must match both in draggable and droppable.dropScope.\r\n     */\r\n    dragScope: string | Array<string>;\r\n    /**\r\n     * The CSS class applied to a draggable element. If a dragHandle is defined then its applied to that handle\r\n     * element only. By default it is used to change the mouse over pointer.\r\n     */\r\n    dragHandleClass: string;\r\n    /**\r\n     * CSS class applied on the source draggable element while being dragged.\r\n     */\r\n    dragClass: string;\r\n    /**\r\n     * CSS class applied on the drag ghost when being dragged.\r\n     */\r\n    dragTransitClass: string;\r\n    /**\r\n     * The url to image that will be used as custom drag image when the draggable is being dragged.\r\n     */\r\n    dragImage: string;\r\n    /**\r\n     * Defines if drag is enabled. `true` by default.\r\n     */\r\n    dragEnabled: boolean;\r\n    /**\r\n     * Event fired when Drag is started\r\n     */\r\n    onDragStart: EventEmitter<any>;\r\n    /**\r\n     * Event fired while the element is being dragged\r\n     */\r\n    onDrag: EventEmitter<any>;\r\n    /**\r\n     * Event fired when drag ends\r\n     */\r\n    onDragEnd: EventEmitter<any>;\r\n    /**\r\n     * @private\r\n     * Keeps track of mouse over element that is used to determine drag handles\r\n     */\r\n    mouseDownElement: any;\r\n    /**\r\n     * @private\r\n     * Backing field for the dragEnabled property\r\n     */\r\n    _dragEnabled: boolean;\r\n    /**\r\n     * @private\r\n     * Backing field for the dragImage property\r\n     */\r\n    _dragImage: string;\r\n    /**\r\n     * @private\r\n     * Image element for the dragImage\r\n     */\r\n    dragImageElement: HTMLImageElement;\r\n    /**\r\n     * @private\r\n     * Function for unbinding the drag listener\r\n     */\r\n    unbindDragListener: Function;\r\n    constructor(el: ElementRef, renderer: Renderer2, ng2DragDropService: NgDragDropService, zone: NgZone);\r\n    ngOnInit(): void;\r\n    ngOnDestroy(): void;\r\n    dragStart(e: any): void;\r\n    drag(e: any): void;\r\n    dragEnd(e: any): void;\r\n    mousedown(e: any): void;\r\n    private allowDrag();\r\n    private applyDragHandleClass();\r\n    private getDragHandleElement();\r\n    unbindDragListeners(): void;\r\n}\r\n"]}